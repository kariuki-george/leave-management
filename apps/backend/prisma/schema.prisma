generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LeaveTypes {
  name   String
  code   String   @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt() @default(now())
  leaves Leaves[]
}

model Leaves {
  leaveId    Int         @id @default(autoincrement()) 
  startDate  DateTime    @db.Date
  endDate    DateTime    @db.Date
  leaveType  String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt() @default(now()) 
  userId     Int?
  leaveTypes LeaveTypes? @relation(fields: [leaveType], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "leaves_leaveType_leaveTypes_code_fk")
  users      Users?      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "leaves_userId_users_userId_fk")
}

model Users {
  userId              Int    @id @default(autoincrement()) 
  email               String?   @unique(map: "users_email_unique")
  firstName           String?
  lastName            String?
  password            String?
  createdAt DateTime  @default(now())
   updatedAt DateTime  @updatedAt() @default(now())
  leaveRemaining      Int?      @db.SmallInt
  leaveLastUpdateDate DateTime? @db.Date @default(now())
  jwtVersion          Int?      
  leaves              Leaves[]
  isAdmin            Boolean @default(false)
  disabled           Boolean @default(false)
  gender            Gender
 
}

model OffDays{
  createdAt DateTime  @default(now())
  author String?  
  offDayId              Int   @id @default(autoincrement()) 
  date DateTime
  name String

  @@unique([date,name])
}


model FinYear {
  finYearId              Int   @id @default(autoincrement()) 
  startDate DateTime
  endDate DateTime
  createdAt DateTime  @default(now())
  author String? 
  status  FinYearStatus @default(CURRENT)


}


enum FinYearStatus {
  RETIRED
  CURRENT
  
}


enum Gender {
  M
  F
}